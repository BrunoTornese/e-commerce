generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
  N_A
}

enum ShoeSize {
  EU_36
  EU_36_5
  EU_37
  EU_37_5
  EU_38
  EU_38_5
  EU_39
  EU_39_5
  EU_40
  EU_40_5
  EU_41
  EU_41_5
  EU_42
  EU_42_5
  EU_43
  EU_43_5
  EU_44
  EU_44_5
  EU_45
  EU_45_5
  EU_46
  EU_46_5
  EU_47
  EU_47_5
  N_A
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  admin
  user
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Product {
  id           String         @id @default(uuid())
  title        String
  description  String
  inStock      Int
  price        Float          @default(0)
  size         Size[]         @default([])
  shoeSize     ShoeSize[]     @default([])
  slug         String         @unique
  tags         String[]       @default([])
  gender       Gender
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   String
  ProductImage ProductImage[]
  OrderItem    OrderItem[]
  comments     Comment[]
  Favorite     Favorite[]

  @@index([gender])
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model User {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  password      String
  role          Role         @default(user)
  image         String?
  address       UserAddress?
  Order         Order[]
  comments      Comment[]
  Favorite      Favorite[]
}

model Country {
  id           String         @id
  name         String
  address      UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  phone      String
  city       String

  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Order {
  id          String    @id @default(uuid())
  subTotal    Float
  tax         Float
  total       Float
  itemsInCart Int
  isPaid      Boolean   @default(false)
  paidAt      DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User           @relation(fields: [userId], references: [id])
  userId        String
  OrderItem     OrderItem[]
  OrderAddress  OrderAddress[]
  transactionId String?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  size     Size

  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id              String  @id @default(uuid())
  firstName       String
  lastName        String
  address         String
  address2        String?
  postalCode      String
  city            String
  phone           String
  rememberAddress Boolean

  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  order   Order   @relation(fields: [orderId], references: [id])
  orderId String
  userId  String?
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [id])
  productId String

  user     User   @relation(fields: [userId], references: [id])
  userId   String
  userName String
}

model Favorite {
  id        String @id @default(uuid())
  userId    String
  productId String

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}
